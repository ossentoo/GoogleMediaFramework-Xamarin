{"Name":"Google Media Framework Binding","Id":2562,"Alias":"GoogleMediaFramework","Description":"Google Media Framework\r\n======================\r\nThis is a Xamarin Binding Library for the Google Media Framework, built for [iOS][iOSGMF] and [Android][AndGMF]. Google Media Framework (GMF) is a video player SDK. GMF offers the following key features:\r\n\r\n###Android\r\n - Support for mp4 progressive download and DASH streaming\r\n - Powerful video player built on [ExoPlayer][Exo] (can be extended to support other media formats)\r\n - Ad video support through integration with [IMA SDK][IMASDK]\r\n - UI customization (logo, color schemes, and action buttons)\r\n - Android 4.1+\r\n\r\n###iOS\r\n- Support for mp4 progressive download and HLS streaming\r\n- Ad video support through integration with [IMA SDK][IMASDK]\r\n- UI customization (logo, color schemes, and action buttons)\r\n- iOS 6.1+\r\n\r\n\r\n\r\n[AndGMF]: https://github.com/googleads/google-media-framework-android\r\n[iOSGMF]: https://github.com/googleads/google-media-framework-ios\r\n[IMASDK]:https://developers.google.com/interactive-media-ads/\r\n[Exo]:http://developer.android.com/guide/topics/media/exoplayer.html","Version":"1.0","Summary":"Binding library for the Google Media Framework (with IMA SDK integration)","QuickStart":"# Usage\r\n\r\n##iOS\r\n \r\nFor full usage details on the entire library visit the [Google Media Framework iOS Wiki][iOSWiki]\r\n \r\nThe main class that we should be using is the `GMFPlayerViewController`, this is the `UIViewController` that contains both the content video player and the optional ad video player.\r\n\r\nWhen you are ready to display your video, you can instantiate the `GMFPlayerViewController` and set its properties like the example below:\r\n```csharp\r\n            _videoPlayerViewController = new GMFPlayerViewController();\r\n\r\n            _playbackDidFinishObserver = NSNotificationCenter.DefaultCenter.AddObserver(Constants.kGMFPlayerStateDidChangeToFinishedNotification,\r\n                PlaybackDidFinish);\r\n\r\n            _videoPlayerViewController.LoadStreamWithURL(NSUrl.FromString(video.VideoUrl));\r\n\r\n            if (video.AdTagUrl != null)\r\n            {\r\n                _adService = new GMFIMAAdService(_videoPlayerViewController);\r\n                _videoPlayerViewController.RegisterAdService(_adService);\r\n\r\n                _adService.RequestAdsWithRequest(video.AdTagUrl);\r\n            }\r\n\r\n            ShowPlayer();\r\n            _videoPlayerViewController.VideoTitle = video.Title;\r\n            _videoPlayerViewController.Play();\r\n```\r\n\t\t\t\r\nYou can refer to the [IMA SDK Reference][iOSIMA] for proper ad tag formats \r\n\r\nOnce you have setup your `GMFPlayerViewController` you can add it as a Child `UIViewController`:\r\n\r\n```csharp\r\n            this.AddChildViewController(_videoPlayerViewController);\r\n            _videoPlayerViewController.DidMoveToParentViewController(this);\r\n\r\n            this.View.AddSubview(_videoPlayerViewController.View);\r\n```\r\n\r\n## Android\r\n\r\nFor full usage details on the entire library visit the [Google Media Framework Android Wiki][AndroidWiki]\r\n\r\nThe main class we are concerned with here is the `ImaPlayer`. This is the class that combines two `SimpleVideoPlayer` classes together, one for the content video and one for the ad content. \r\n\r\nAlong with the video details and ad tag URL, the `ImaPlayer` also needs to be instantiated with the current `Activity` as well as a `FrameLayout` that will act as the container that the `ImaPlayer` will inject the video players and other UI elements.\r\n\r\nOnce you have the video information ready, you can prepare the `ImaPlayer` like so:\r\n\r\n```csharp\r\n            imaPlayer?.Release();\r\n\r\n            videoPlayerContainer.RemoveAllViews();\r\n\r\n            string adTagUrl = video.adUrl;\r\n            string videoTitle = video.title;\r\n            \r\n            imaPlayer = new ImaPlayer(this, videoPlayerContainer, video.video, videoTitle, adTagUrl);\r\n            imaPlayer.SetFullscreenCallback(this);\r\n\r\n            imaPlayer.Play();\r\n```\r\nYou can refer to the [IMA SDK Reference][AndroidIMA] for proper ad tag formats\r\n\r\nCalling `Release()` on the `ImaPlayer` will ensure all views are destroyed and playback is halted, it is good practice to do this before starting a new video.\r\n\r\nYou may also want to have your `Activity` inherit from `PlaybackControlLayer.IFullscreenCallback` so you may set this `Activity` as the `ImaPlayer`\u0027s FullscreenCallback to receive events when the user has toggled the Fullscreen button on the player.\r\n\r\n\r\n###Thanks to\r\n\r\n- [Martijn van Dijk][MartijnvanDijk] for the ExoPlayer Metadata fixes\r\n\r\n\r\n[mit]: http://opensource.org/licenses/mit-license\r\n[MartijnvanDijk]: https://github.com/martijn00\r\n[AndGMF]: https://github.com/googleads/google-media-framework-android\r\n[iOSGMF]: https://github.com/googleads/google-media-framework-ios\r\n[IMASDK]:https://developers.google.com/interactive-media-ads/\r\n[iOSIMA]:https://developers.google.com/interactive-media-ads/docs/sdks/ios/\r\n[AndroidIMA]:https://developers.google.com/interactive-media-ads/docs/sdks/android/\r\n[iOSWiki]:https://github.com/googleads/google-media-framework-ios/wiki\r\n[AndroidWiki]:https://github.com/googleads/google-media-framework-android/wiki\r\n[Exo]:http://developer.android.com/guide/topics/media/exoplayer.html","Hash":"a8ddd27ed82e3a0d7c8ad41e72628515","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}